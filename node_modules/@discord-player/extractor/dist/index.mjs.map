{"version":3,"sources":["../src/extractors/SoundCloudExtractor.ts","../src/extractors/YoutubeExtractor.ts","../src/extractors/common/helper.ts","../src/extractors/LyricsExtractor.ts","../src/extractors/VimeoExtractor.ts","../src/internal/Vimeo.ts","../src/extractors/ReverbnationExtractor.ts","../src/extractors/AttachmentExtractor.ts","../src/internal/downloader.ts","../src/extractors/AppleMusicExtractor.ts","../src/internal/index.ts","../src/internal/AppleMusic.ts","../src/extractors/SpotifyExtractor.ts","../src/index.ts"],"sourcesContent":["// prettier-ignore\nimport {\n    BaseExtractor,\n    ExtractorInfo,\n    ExtractorSearchContext,\n    Playlist,\n    QueryType,\n    SearchQueryType,\n    Track,\n    Util\n} from 'discord-player';\nimport { Client, Song } from 'soundcloud-scraper';\n\nconst soundcloud = new Client(undefined, {\n    fetchAPIKey: true\n});\n\nexport class SoundCloudExtractor extends BaseExtractor {\n    public static identifier = 'com.discord-player.soundcloudextractor' as const;\n\n    public async validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean> {\n        if (typeof query !== 'string') return false;\n        return ([QueryType.SOUNDCLOUD, QueryType.SOUNDCLOUD_PLAYLIST, QueryType.SOUNDCLOUD_SEARCH, QueryType.SOUNDCLOUD_TRACK] as SearchQueryType[]).some((r) => r === type);\n    }\n\n    public async getRelatedTracks(track: Track) {\n        if (track.queryType === QueryType.SOUNDCLOUD_TRACK)\n            return this.handle(track.author || track.title, {\n                requestedBy: track.requestedBy,\n                type: QueryType.SOUNDCLOUD_SEARCH\n            });\n\n        return this.createResponse();\n    }\n\n    public async handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo> {\n        switch (context.type) {\n            case QueryType.SOUNDCLOUD_TRACK: {\n                const trackInfo = await soundcloud\n                    .getSongInfo(query, {\n                        fetchComments: false,\n                        fetchEmbed: false,\n                        fetchStreamURL: true\n                    })\n                    .catch(Util.noop);\n\n                if (!trackInfo) return this.emptyResponse();\n\n                const track = new Track(this.context.player, {\n                    title: trackInfo.title,\n                    url: trackInfo.url,\n                    duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration)),\n                    description: trackInfo.description,\n                    thumbnail: trackInfo.thumbnail,\n                    views: trackInfo.playCount,\n                    author: trackInfo.author.name,\n                    requestedBy: context.requestedBy,\n                    source: 'soundcloud',\n                    engine: trackInfo,\n                    queryType: context.type\n                });\n\n                return { playlist: null, tracks: [track] };\n            }\n            case QueryType.SOUNDCLOUD_PLAYLIST: {\n                const data = await soundcloud\n                    .getPlaylist(query, {\n                        fetchEmbed: false\n                    })\n                    .catch(Util.noop);\n                if (!data) return { playlist: null, tracks: [] };\n\n                const res = new Playlist(this.context.player, {\n                    title: data.title,\n                    description: data.description ?? '',\n                    thumbnail: data.thumbnail ?? 'https://soundcloud.com/pwa-icon-192.png',\n                    type: 'playlist',\n                    source: 'soundcloud',\n                    author: {\n                        name: data.author?.name ?? data.author?.username ?? 'Unknown Artist',\n                        url: data.author?.profile\n                    },\n                    tracks: [],\n                    id: `${data.id}`,\n                    url: data.url,\n                    rawPlaylist: data\n                });\n\n                for (const song of data.tracks) {\n                    const track = new Track(this.context.player, {\n                        title: song.title,\n                        description: song.description ?? '',\n                        author: song.author?.username ?? song.author?.name ?? 'Unknown Artist',\n                        url: song.url,\n                        thumbnail: song.thumbnail,\n                        duration: Util.buildTimeCode(Util.parseMS(song.duration)),\n                        views: song.playCount ?? 0,\n                        requestedBy: context.requestedBy,\n                        playlist: res,\n                        source: 'soundcloud',\n                        engine: song,\n                        queryType: context.type\n                    });\n                    res.tracks.push(track);\n                }\n\n                return { playlist: res, tracks: res.tracks };\n            }\n            default: {\n                const tracks = await soundcloud.search(query, 'track').catch(Util.noop);\n                if (!tracks || !tracks.length) return this.emptyResponse();\n\n                const resolvedTracks: Track[] = [];\n\n                for (const searchedTrack of tracks) {\n                    const trackInfo = await soundcloud\n                        .getSongInfo(searchedTrack.url, {\n                            fetchStreamURL: true,\n                            fetchComments: false,\n                            fetchEmbed: false\n                        })\n                        .catch(Util.noop);\n                    if (!trackInfo) continue;\n\n                    const track = new Track(this.context.player, {\n                        title: trackInfo.title,\n                        url: trackInfo.url,\n                        duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration)),\n                        description: trackInfo.description,\n                        thumbnail: trackInfo.thumbnail,\n                        views: trackInfo.playCount,\n                        author: trackInfo.author.name,\n                        requestedBy: context.requestedBy,\n                        source: 'soundcloud',\n                        engine: trackInfo,\n                        queryType: 'soundcloudTrack'\n                    });\n\n                    resolvedTracks.push(track);\n                }\n\n                return { playlist: null, tracks: resolvedTracks };\n            }\n        }\n    }\n\n    public emptyResponse(): ExtractorInfo {\n        return { playlist: null, tracks: [] };\n    }\n\n    public async stream(info: Track) {\n        const engine = info.raw.engine as Song;\n        if (engine && engine.streamURL) {\n            return engine.streamURL;\n        }\n\n        const url = await soundcloud.fetchStreamURL(info.url).catch(Util.noop);\n        if (!url) throw new Error('Could not extract stream from this source');\n\n        if (engine) {\n            engine.streamURL = url;\n        } else {\n            info.raw.engine = {\n                streamURL: url\n            };\n        }\n\n        return url;\n    }\n}\n","import { Video, YouTube } from 'youtube-sr';\n\n// prettier-ignore\nimport {\n    BaseExtractor,\n    ExtractorInfo,\n    ExtractorSearchContext,\n    Playlist,\n    QueryType,\n    SearchQueryType,\n    Track,\n    Util\n} from 'discord-player';\n\nimport { StreamFN, YouTubeLibs, loadYtdl, makeYTSearch } from './common/helper';\n\n// taken from ytdl-core\nconst validQueryDomains = new Set(['youtube.com', 'www.youtube.com', 'm.youtube.com', 'music.youtube.com', 'gaming.youtube.com']);\nconst validPathDomains = /^https?:\\/\\/(youtu\\.be\\/|(www\\.)?youtube\\.com\\/(embed|v|shorts)\\/)/;\nconst idRegex = /^[a-zA-Z0-9-_]{11}$/;\n\nexport class YoutubeExtractor extends BaseExtractor {\n    public static identifier = 'com.discord-player.youtubeextractor' as const;\n    private _stream!: StreamFN;\n    public _ytLibName!: string;\n\n    public async activate() {\n        const { stream, name } = await loadYtdl(this.context.player.options.ytdlOptions);\n        this._stream = stream;\n        this._ytLibName = name;\n    }\n\n    public async validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean> {\n        if (typeof query !== 'string') return false;\n        return ([QueryType.YOUTUBE, QueryType.YOUTUBE_PLAYLIST, QueryType.YOUTUBE_SEARCH, QueryType.YOUTUBE_VIDEO, QueryType.AUTO] as SearchQueryType[]).some((r) => r === type);\n    }\n\n    public async handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo> {\n        query = query.includes('youtube.com') ? query.replace(/(m(usic)?|gaming)\\./, '') : query;\n        if (YoutubeExtractor.validateURL(query)) context.type = QueryType.YOUTUBE_VIDEO;\n\n        switch (context.type) {\n            case QueryType.YOUTUBE_PLAYLIST: {\n                const ytpl = await YouTube.getPlaylist(query, {\n                    fetchAll: true,\n                    requestOptions: context.requestOptions as unknown as RequestInit\n                }).catch(Util.noop);\n                if (!ytpl) return this.emptyResponse();\n\n                const playlist = new Playlist(this.context.player, {\n                    title: ytpl.title!,\n                    thumbnail: ytpl.thumbnail as unknown as string,\n                    description: ytpl.title || '',\n                    type: 'playlist',\n                    source: 'youtube',\n                    author: {\n                        name: ytpl.channel!.name as string,\n                        url: ytpl.channel!.url as string\n                    },\n                    tracks: [],\n                    id: ytpl.id as string,\n                    url: ytpl.url as string,\n                    rawPlaylist: ytpl\n                });\n\n                playlist.tracks = ytpl.videos.map(\n                    (video) =>\n                        new Track(this.context.player, {\n                            title: video.title as string,\n                            description: video.description as string,\n                            author: video.channel?.name as string,\n                            url: video.url,\n                            requestedBy: context.requestedBy,\n                            thumbnail: video.thumbnail!.url as string,\n                            views: video.views,\n                            duration: video.durationFormatted,\n                            raw: video,\n                            playlist: playlist,\n                            source: 'youtube',\n                            queryType: 'youtubeVideo'\n                        })\n                );\n\n                return { playlist, tracks: playlist.tracks };\n            }\n            case QueryType.YOUTUBE_VIDEO: {\n                const id = /[a-zA-Z0-9-_]{11}/.exec(query);\n                if (!id?.[0]) return this.emptyResponse();\n                const video = await YouTube.getVideo(`https://www.youtube.com/watch?v=${id}`, context.requestOptions as unknown as RequestInit).catch(Util.noop);\n                if (!video) return this.emptyResponse();\n\n                // @ts-expect-error\n                video.source = 'youtube';\n\n                return {\n                    playlist: null,\n                    tracks: [\n                        new Track(this.context.player, {\n                            title: video.title!,\n                            description: video.description!,\n                            author: video.channel?.name as string,\n                            url: video.url,\n                            requestedBy: context.requestedBy,\n                            thumbnail: video.thumbnail?.displayThumbnailURL('maxresdefault') as string,\n                            views: video.views,\n                            duration: video.durationFormatted,\n                            source: 'youtube',\n                            raw: video,\n                            queryType: context.type\n                        })\n                    ]\n                };\n            }\n            default: {\n                const tracks = await this._makeYTSearch(query, context);\n                return { playlist: null, tracks };\n            }\n        }\n    }\n\n    private async _makeYTSearch(query: string, context: ExtractorSearchContext) {\n        const res = await makeYTSearch(query, context.requestOptions).catch(Util.noop);\n        if (!res || !res.length) return [];\n\n        return res.map((video) => {\n            // @ts-expect-error\n            video.source = 'youtube';\n\n            return new Track(this.context.player, {\n                title: video.title!,\n                description: video.description!,\n                author: video.channel?.name as string,\n                url: video.url,\n                requestedBy: context.requestedBy,\n                thumbnail: video.thumbnail?.displayThumbnailURL('maxresdefault') as string,\n                views: video.views,\n                duration: video.durationFormatted,\n                source: 'youtube',\n                raw: video,\n                queryType: context.type!\n            });\n        });\n    }\n\n    public async getRelatedTracks(track: Track) {\n        let info: Video[] | void;\n\n        if (YoutubeExtractor.validateURL(track.url))\n            info = await YouTube.getVideo(track.url)\n                .then((x) => x.videos)\n                .catch(Util.noop);\n\n        // fallback\n        if (!info)\n            info = await YouTube.search(track.author || track.title, { limit: 5, type: 'video' })\n                .then((x) => x)\n                .catch(Util.noop);\n\n        if (!info?.length) {\n            return this.createResponse();\n        }\n\n        const similar = info.map(\n            (video) =>\n                new Track(this.context.player, {\n                    title: video.title!,\n                    url: `https://www.youtube.com/watch?v=${video.id}`,\n                    duration: video.durationFormatted || Util.buildTimeCode(Util.parseMS(video.duration * 1000)),\n                    description: video.title!,\n                    thumbnail: typeof video.thumbnail === 'string' ? video.thumbnail! : video.thumbnail!.url!,\n                    views: video.views,\n                    author: video.channel!.name!,\n                    requestedBy: track.requestedBy,\n                    source: 'youtube',\n                    queryType: 'youtubeVideo'\n                })\n        );\n\n        return this.createResponse(null, similar);\n    }\n\n    public emptyResponse(): ExtractorInfo {\n        return { playlist: null, tracks: [] };\n    }\n\n    public async stream(info: Track) {\n        if (!this._stream) {\n            throw new Error(`Could not find youtube streaming library. Install one of ${YouTubeLibs.join(', ')}`);\n        }\n\n        let url = info.url;\n\n        if (info.queryType === 'spotifySong' || info.queryType === 'appleMusicSong') {\n            if (YoutubeExtractor.validateURL(info.raw.url)) url = info.raw.url;\n            else {\n                const _url = await YouTube.searchOne(`${info.title} ${info.author}`, 'video')\n                    .then((r) => r.url)\n                    .catch(Util.noop);\n                if (!_url) throw new Error(`Could not extract stream for this track`);\n                info.raw.url = url = _url;\n            }\n        }\n\n        if (url) url = url.includes('youtube.com') ? url.replace(/(m(usic)?|gaming)\\./, '') : url;\n\n        return this._stream(url);\n    }\n\n    public static validateURL(link: string) {\n        try {\n            YoutubeExtractor.parseURL(link);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    public static validateId(id: string) {\n        return idRegex.test(id.trim());\n    }\n\n    public static parseURL(link: string) {\n        const parsed = new URL(link.trim());\n        let id = parsed.searchParams.get('v');\n        if (validPathDomains.test(link.trim()) && !id) {\n            const paths = parsed.pathname.split('/');\n            id = parsed.host === 'youtu.be' ? paths[1] : paths[2];\n        } else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {\n            throw Error('Not a YouTube domain');\n        }\n        if (!id) {\n            throw Error(`No video id found: \"${link}\"`);\n        }\n        id = id.substring(0, 11);\n        if (!exports.validateID(id)) {\n            throw TypeError(`Video id (${id}) does not match expected ` + `format (${idRegex.toString()})`);\n        }\n        return id;\n    }\n}\n\nexport { YoutubeExtractor as YouTubeExtractor };\n","import { YouTube } from 'youtube-sr';\n\nlet factory: {\n    name: string;\n    stream: StreamFN;\n    lib: string;\n};\n\nexport const createImport = (lib: string) => import(lib).catch(() => null);\n\nexport const YouTubeLibs = [\n    'ytdl-core',\n    'play-dl',\n    '@distube/ytdl-core'\n    // add more to the list if you have any\n];\n\n// forced lib\nconst forcedLib = process.env.DP_FORCE_YTDL_MOD;\nif (forcedLib) YouTubeLibs.unshift(forcedLib);\n\nexport const getFetch =\n    typeof fetch !== 'undefined'\n        ? fetch\n        : async (...params: unknown[]) => {\n              // eslint-disable-next-line\n              let dy: any;\n\n              /* eslint-disable no-cond-assign */\n              if ((dy = await createImport('undici'))) {\n                  return (dy.fetch || dy.default.fetch)(...params);\n              } else if ((dy = await createImport('node-fetch'))) {\n                  return (dy.fetch || dy.default)(...params);\n              } else {\n                  throw new Error('No fetch lib found');\n              }\n\n              /* eslint-enable no-cond-assign */\n          };\n\nexport type StreamFN = (q: string) => Promise<import('stream').Readable | string>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function loadYtdl(options?: any, force = false) {\n    if (factory && !force) return factory;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let lib: any, _ytLibName: string, _stream: StreamFN;\n\n    for (const ytlib of YouTubeLibs) {\n        lib = await import(ytlib).then(\n            (m) => m,\n            () => null\n        );\n        if (!lib) continue;\n        lib = lib.default || lib;\n        _ytLibName = ytlib;\n        break;\n    }\n\n    if (lib) {\n        const isYtdl = ['ytdl-core', '@distube/ytdl-core'].some((lib) => lib === _ytLibName);\n\n        _stream = async (query) => {\n            if (isYtdl) {\n                const dl = lib as typeof import('ytdl-core');\n                const info = await dl.getInfo(query, options);\n\n                const formats = info.formats\n                    .filter((format) => {\n                        return info.videoDetails.isLiveContent ? format.isHLS && format.hasAudio : format.hasAudio;\n                    })\n                    .sort((a, b) => Number(b.audioBitrate) - Number(a.audioBitrate) || Number(a.bitrate) - Number(b.bitrate));\n\n                const fmt = formats.find((format) => !format.hasVideo) || formats.sort((a, b) => Number(a.bitrate) - Number(b.bitrate))[0];\n                return fmt.url;\n                // return dl(query, this.context.player.options.ytdlOptions);\n            } else {\n                const dl = lib as typeof import('play-dl');\n\n                const info = await dl.video_info(query);\n                const formats = info.format\n                    .filter((format) => {\n                        const re = /\\/manifest\\/hls_(variant|playlist)\\//;\n                        if (!format.url) return false;\n                        if (info.video_details.live) return re.test(format.url) && typeof format.bitrate === 'number';\n                        return typeof format.bitrate === 'number';\n                    })\n                    .sort((a, b) => Number(b.bitrate) - Number(a.bitrate));\n\n                const fmt = formats.find((format) => !format.qualityLabel) || formats.sort((a, b) => Number(a.bitrate) - Number(b.bitrate))[0];\n                return fmt.url!;\n                // return (await dl.stream(query, { discordPlayerCompatibility: true })).stream;\n            }\n        };\n    } else {\n        throw new Error(`Could not load youtube library. Install one of ${YouTubeLibs.map((lib) => `\"${lib}\"`).join(', ')}`);\n    }\n\n    factory = { name: _ytLibName!, stream: _stream, lib };\n    return factory;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function makeYTSearch(query: string, opt: any) {\n    const res = await YouTube.search(query, {\n        type: 'video',\n        requestOptions: opt\n    }).catch(() => {\n        //\n    });\n\n    return res || [];\n}\n","import { Client as GeniusClient } from 'genius-lyrics';\n\n// lazy load client\nlet client: GeniusClient;\n\nexport function lyricsExtractor(apiKey?: string, force?: boolean) {\n    if (!client && !force) client = new GeniusClient(apiKey);\n    return { search, client };\n}\n\nfunction search(query: string) {\n    return new Promise<LyricsData | null>((resolve, reject) => {\n        if (typeof query !== 'string') return reject(new TypeError(`Expected search query to be a string, received \"${typeof query}\"!`));\n\n        client.songs\n            .search(query)\n            .then(async (songs) => {\n                const data = {\n                    title: songs[0].title,\n                    id: songs[0].id,\n                    thumbnail: songs[0].thumbnail,\n                    image: songs[0].image,\n                    url: songs[0].url,\n                    artist: {\n                        name: songs[0].artist.name,\n                        id: songs[0].artist.id,\n                        url: songs[0].artist.url,\n                        image: songs[0].artist.image\n                    },\n                    lyrics: await songs[0].lyrics(false)\n                };\n\n                resolve(data);\n            })\n            .catch(() => {\n                reject(new Error('Could not parse lyrics'));\n            });\n    });\n}\n\nexport interface LyricsData {\n    title: string;\n    id: number;\n    thumbnail: string;\n    image: string;\n    url: string;\n    artist: {\n        name: string;\n        id: number;\n        url: string;\n        image: string;\n    };\n    lyrics: string;\n}\n","// prettier-ignore\nimport {\n    BaseExtractor,\n    ExtractorInfo,\n    ExtractorSearchContext,\n    QueryType,\n    SearchQueryType,\n    Track,\n    Util\n} from 'discord-player';\nimport { Vimeo } from '../internal/Vimeo';\n\nexport class VimeoExtractor extends BaseExtractor {\n    public static identifier = 'com.discord-player.vimeoextractor' as const;\n\n    public async validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean> {\n        if (typeof query !== 'string') return false;\n        return ([QueryType.VIMEO] as SearchQueryType[]).some((r) => r === type);\n    }\n\n    public async getRelatedTracks(track: Track) {\n        void track;\n        return this.createResponse();\n    }\n\n    public async handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo> {\n        switch (context.type) {\n            case QueryType.VIMEO: {\n                const trackInfo = await Vimeo.getInfo(\n                    query\n                        .split('/')\n                        .filter((x) => !!x)\n                        .pop()!\n                ).catch(Util.noop);\n\n                if (!trackInfo) return this.emptyResponse();\n\n                const track = new Track(this.context.player, {\n                    title: trackInfo.title,\n                    url: trackInfo.url,\n                    duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration || 0)),\n                    description: `${trackInfo.title} by ${trackInfo.author.name}`,\n                    thumbnail: trackInfo.thumbnail,\n                    views: 0,\n                    author: trackInfo.author.name,\n                    requestedBy: context.requestedBy,\n                    source: 'arbitrary',\n                    engine: trackInfo.stream,\n                    queryType: context.type\n                });\n\n                return { playlist: null, tracks: [track] };\n            }\n            default:\n                return this.emptyResponse();\n        }\n    }\n\n    public emptyResponse(): ExtractorInfo {\n        return { playlist: null, tracks: [] };\n    }\n\n    public async stream(info: Track) {\n        const engine = info.raw.engine as string;\n        if (engine) {\n            return engine;\n        }\n\n        const track = await Vimeo.getInfo(info.url).catch(Util.noop);\n        if (!track || !track.stream) throw new Error('Could not extract stream from this source');\n\n        info.raw.engine = {\n            streamURL: track.stream\n        };\n\n        return track.stream;\n    }\n}\n","import { Readable } from 'stream';\nimport http from 'http';\nimport https from 'https';\nimport { getFetch } from '../extractors/common/helper';\n\nclass Vimeo {\n    constructor() {\n        throw new Error(`The ${this.constructor.name} class may not be instantiated!`);\n    }\n\n    /**\n     * @typedef {Readable} Readable\n     */\n\n    /**\n     * Downloads from vimeo\n     * @param {number} id Vimeo video id\n     * @returns {Promise<Readable>}\n     */\n    static download(id: number | string): Promise<Readable> {\n        return new Promise(async (resolve) => {\n            const info = await Vimeo.getInfo(id);\n            if (!info) return null;\n\n            const downloader = info.stream.startsWith('https://') ? https : http;\n\n            downloader.get(info.stream, (res) => {\n                resolve(res);\n            });\n        });\n    }\n\n    /**\n     * Returns video info\n     * @param {number} id Video id\n     */\n    static async getInfo(id: number | string): Promise<VimeoInfo | null> {\n        if (!id) throw new Error('Invalid id');\n        const url = `https://player.vimeo.com/video/${id}`;\n\n        try {\n            const res = await getFetch(url);\n            const data = await res.text();\n            const json = JSON.parse(data.split('window.playerConfig =')[1].split(';')[0].trim());\n\n            const obj = {\n                id: json.video.id,\n                duration: json.video.duration * 1000,\n                title: json.video.title,\n                url: json.video.url,\n                thumbnail: json.video.thumbs['1280'] || json.video.thumbs.base,\n                stream: json.request.files.progressive[0].url,\n                author: {\n                    id: json.video.owner.id,\n                    name: json.video.owner.name,\n                    url: json.video.owner.url,\n                    avatar: json.video.owner.img_2x || json.video.owner.img\n                }\n            };\n\n            return obj;\n        } catch {\n            return null;\n        }\n    }\n}\n\nexport interface VimeoInfo {\n    id: number;\n    duration: number;\n    title: string;\n    url: string;\n    thumbnail: string;\n    stream: string;\n    author: {\n        id: number;\n        name: string;\n        url: string;\n        avatar: string;\n    };\n}\n\nexport { Vimeo };\n","// prettier-ignore\nimport {\n    BaseExtractor,\n    ExtractorInfo,\n    ExtractorSearchContext,\n    QueryType,\n    SearchQueryType,\n    Track,\n    Util\n} from 'discord-player';\nimport reverbnation from 'reverbnation-scraper';\n\nexport class ReverbnationExtractor extends BaseExtractor {\n    public static identifier = 'com.discord-player.reverbnationextractor' as const;\n\n    public async validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean> {\n        if (typeof query !== 'string') return false;\n        return ([QueryType.REVERBNATION] as SearchQueryType[]).some((r) => r === type);\n    }\n\n    public async getRelatedTracks(track: Track) {\n        void track;\n        return this.createResponse();\n    }\n\n    public async handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo> {\n        switch (context.type) {\n            case QueryType.REVERBNATION: {\n                const trackInfo = await reverbnation.getInfo(query).catch(Util.noop);\n\n                if (!trackInfo) return this.emptyResponse();\n\n                const track = new Track(this.context.player, {\n                    title: trackInfo.title,\n                    url: trackInfo.url,\n                    duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration)),\n                    description: trackInfo.lyrics || `${trackInfo.title} by ${trackInfo.artist.name}`,\n                    thumbnail: trackInfo.thumbnail,\n                    views: 0,\n                    author: trackInfo.artist.name,\n                    requestedBy: context.requestedBy,\n                    source: 'arbitrary',\n                    engine: trackInfo.streamURL,\n                    queryType: context.type\n                });\n\n                return { playlist: null, tracks: [track] };\n            }\n            default:\n                return this.emptyResponse();\n        }\n    }\n\n    public emptyResponse(): ExtractorInfo {\n        return { playlist: null, tracks: [] };\n    }\n\n    public async stream(info: Track) {\n        const engine = info.raw.engine as string;\n        if (engine) {\n            return engine;\n        }\n\n        const track = await reverbnation.getInfo(info.url).catch(Util.noop);\n        if (!track || !track.streamURL) throw new Error('Could not extract stream from this source');\n\n        info.raw.engine = {\n            streamURL: track.streamURL\n        };\n\n        return track.streamURL;\n    }\n}\n","// prettier-ignore\nimport {\n    BaseExtractor,\n    ExtractorInfo,\n    ExtractorSearchContext,\n    QueryType,\n    SearchQueryType,\n    Track,\n    Util\n} from 'discord-player';\nimport type { IncomingMessage } from 'http';\nimport { createReadStream, existsSync } from 'fs';\nimport { downloadStream } from '../internal/downloader';\nimport { fromFile } from 'file-type';\nimport path from 'path';\nimport { stat } from 'fs/promises';\n\nexport class AttachmentExtractor extends BaseExtractor {\n    public static identifier = 'com.discord-player.attachmentextractor' as const;\n\n    public async validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean> {\n        if (typeof query !== 'string') return false;\n        return ([QueryType.ARBITRARY, QueryType.FILE] as SearchQueryType[]).some((r) => r === type);\n    }\n\n    public async getRelatedTracks(track: Track) {\n        void track;\n        return this.createResponse();\n    }\n\n    public async handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo> {\n        switch (context.type) {\n            case QueryType.ARBITRARY: {\n                const data = (await downloadStream(query, context.requestOptions)) as IncomingMessage;\n                if (!['audio/', 'video/'].some((r) => !!data.headers['content-type']?.startsWith(r))) return this.emptyResponse();\n                const trackInfo = {\n                    title: (\n                        query\n                            .split('/')\n                            .filter((x) => x.length)\n                            .pop() ?? 'Attachment'\n                    )\n                        .split('?')[0]\n                        .trim(),\n                    duration: 0,\n                    thumbnail: 'https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png',\n                    engine: query,\n                    // eslint-disable-next-line\n                    author: ((data as any).client?.servername as string) || 'Attachment',\n                    // eslint-disable-next-line\n                    description: ((data as any).client?.servername as string) || 'Attachment',\n                    url: data.url || query\n                };\n\n                const track = new Track(this.context.player, {\n                    title: trackInfo.title,\n                    url: trackInfo.url,\n                    duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration)),\n                    description: trackInfo.description,\n                    thumbnail: trackInfo.thumbnail,\n                    views: 0,\n                    author: trackInfo.author,\n                    requestedBy: context.requestedBy,\n                    source: 'arbitrary',\n                    engine: trackInfo.url,\n                    queryType: context.type\n                });\n\n                // @ts-expect-error\n                track.raw.isFile = false;\n\n                return { playlist: null, tracks: [track] };\n            }\n            case QueryType.FILE: {\n                if (!existsSync(query)) return this.emptyResponse();\n                const fstat = await stat(query);\n                if (!fstat.isFile()) return this.emptyResponse();\n                const mime = await fromFile(query).catch(() => null);\n                if (!mime || !['audio/', 'video/'].some((r) => !!mime.mime.startsWith(r))) return this.emptyResponse();\n                const trackInfo = {\n                    title: path.basename(query) || 'Attachment',\n                    duration: 0,\n                    thumbnail: 'https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png',\n                    engine: query,\n                    author: 'Attachment',\n                    description: 'Attachment',\n                    url: query\n                };\n\n                const track = new Track(this.context.player, {\n                    title: trackInfo.title,\n                    url: trackInfo.url,\n                    duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration)),\n                    description: trackInfo.description,\n                    thumbnail: trackInfo.thumbnail,\n                    views: 0,\n                    author: trackInfo.author,\n                    requestedBy: context.requestedBy,\n                    source: 'arbitrary',\n                    engine: trackInfo.url,\n                    queryType: context.type\n                });\n\n                // @ts-expect-error\n                track.raw.isFile = true;\n\n                return { playlist: null, tracks: [track] };\n            }\n            default:\n                return this.emptyResponse();\n        }\n    }\n\n    public emptyResponse(): ExtractorInfo {\n        return { playlist: null, tracks: [] };\n    }\n\n    public async stream(info: Track) {\n        const engine = info.raw.engine as string;\n        // @ts-expect-error\n        const isFile = info.raw.isFile as boolean;\n\n        if (!engine) throw new Error('Could not find stream source');\n\n        if (!isFile) {\n            return engine;\n            // return await downloadStream(engine);\n        }\n\n        return createReadStream(engine);\n    }\n}\n","import http, { RequestOptions } from 'http';\nimport https from 'https';\nimport { Readable } from 'stream';\n\nexport function downloadStream(url: string, opts: RequestOptions = {}) {\n    return new Promise<Readable>((resolve, reject) => {\n        const lib = url.startsWith('http://') ? http : https;\n\n        lib.get(url, opts, (res) => resolve(res)).once('error', reject);\n    });\n}\n","import { BaseExtractor, ExtractorInfo, ExtractorSearchContext, Playlist, QueryType, SearchQueryType, Track, Util } from 'discord-player';\nimport { AppleMusic } from '../internal';\nimport { Readable } from 'stream';\nimport { YoutubeExtractor } from './YoutubeExtractor';\nimport { StreamFN, loadYtdl, makeYTSearch } from './common/helper';\n\nexport class AppleMusicExtractor extends BaseExtractor {\n    public static identifier = 'com.discord-player.applemusicextractor' as const;\n    private _stream!: StreamFN;\n\n    public async activate(): Promise<void> {\n        const lib = await loadYtdl(this.context.player.options.ytdlOptions);\n        this._stream = lib.stream;\n    }\n\n    public async validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean> {\n        // prettier-ignore\n        return (<SearchQueryType[]>[\n            QueryType.APPLE_MUSIC_ALBUM,\n            QueryType.APPLE_MUSIC_PLAYLIST,\n            QueryType.APPLE_MUSIC_SONG,\n            QueryType.APPLE_MUSIC_SEARCH\n        ]).some((t) => t === type);\n    }\n\n    public async getRelatedTracks(track: Track) {\n        if (track.queryType === QueryType.APPLE_MUSIC_SONG)\n            return this.handle(track.author || track.title, {\n                type: QueryType.APPLE_MUSIC_SEARCH,\n                requestedBy: track.requestedBy\n            });\n\n        return this.createResponse();\n    }\n\n    public async handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo> {\n        switch (context.type) {\n            case QueryType.APPLE_MUSIC_SEARCH: {\n                const data = await AppleMusic.search(query);\n                if (!data || !data.length) return this.createResponse();\n                const tracks = data.map(\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    (m: any) =>\n                        new Track(this.context.player, {\n                            author: m.artist.name,\n                            description: m.title,\n                            duration: typeof m.duration === 'number' ? Util.buildTimeCode(Util.parseMS(m.duration)) : m.duration,\n                            thumbnail: m.thumbnail,\n                            title: m.title,\n                            url: m.url,\n                            views: 0,\n                            source: 'apple_music',\n                            requestedBy: context.requestedBy,\n                            queryType: 'appleMusicSong'\n                        })\n                );\n\n                return this.createResponse(null, tracks);\n            }\n            case QueryType.APPLE_MUSIC_ALBUM: {\n                const info = await AppleMusic.getAlbumInfo(query);\n                if (!info) return this.createResponse();\n\n                const playlist = new Playlist(this.context.player, {\n                    author: {\n                        name: info.artist.name,\n                        url: ''\n                    },\n                    description: info.title,\n                    id: info.id,\n                    source: 'apple_music',\n                    thumbnail: info.thumbnail,\n                    title: info.title,\n                    tracks: [],\n                    type: 'album',\n                    url: info.url,\n                    rawPlaylist: info\n                });\n\n                playlist.tracks = info.tracks.map(\n                    (\n                        m: any // eslint-disable-line\n                    ) =>\n                        new Track(this.context.player, {\n                            author: m.artist.name,\n                            description: m.title,\n                            duration: typeof m.duration === 'number' ? Util.buildTimeCode(Util.parseMS(m.duration)) : m.duration,\n                            thumbnail: m.thumbnail,\n                            title: m.title,\n                            url: m.url,\n                            views: 0,\n                            source: 'apple_music',\n                            requestedBy: context.requestedBy,\n                            queryType: 'appleMusicSong'\n                        })\n                );\n\n                return { playlist, tracks: playlist.tracks };\n            }\n            case QueryType.APPLE_MUSIC_PLAYLIST: {\n                const info = await AppleMusic.getPlaylistInfo(query);\n                if (!info) return this.createResponse();\n\n                const playlist = new Playlist(this.context.player, {\n                    author: {\n                        name: info.artist.name,\n                        url: ''\n                    },\n                    description: info.title,\n                    id: info.id,\n                    source: 'apple_music',\n                    thumbnail: info.thumbnail,\n                    title: info.title,\n                    tracks: [],\n                    type: 'playlist',\n                    url: info.url,\n                    rawPlaylist: info\n                });\n\n                playlist.tracks = info.tracks.map(\n                    (\n                        m: any // eslint-disable-line\n                    ) =>\n                        new Track(this.context.player, {\n                            author: m.artist.name,\n                            description: m.title,\n                            duration: typeof m.duration === 'number' ? Util.buildTimeCode(Util.parseMS(m.duration)) : m.duration,\n                            thumbnail: m.thumbnail,\n                            title: m.title,\n                            url: m.url,\n                            views: 0,\n                            source: 'apple_music',\n                            requestedBy: context.requestedBy,\n                            queryType: 'appleMusicSong'\n                        })\n                );\n\n                return { playlist, tracks: playlist.tracks };\n            }\n            case QueryType.APPLE_MUSIC_SONG: {\n                const info = await AppleMusic.getSongInfo(query);\n                if (!info) return this.createResponse();\n\n                const track = new Track(this.context.player, {\n                    author: info.artist.name,\n                    description: info.title,\n                    duration: typeof info.duration === 'number' ? Util.buildTimeCode(Util.parseMS(info.duration)) : info.duration,\n                    thumbnail: info.thumbnail,\n                    title: info.title,\n                    url: info.url,\n                    views: 0,\n                    source: 'apple_music',\n                    requestedBy: context.requestedBy,\n                    queryType: context.type\n                });\n\n                return { playlist: null, tracks: [track] };\n            }\n            default:\n                return { playlist: null, tracks: [] };\n        }\n    }\n\n    public async stream(info: Track): Promise<string | Readable> {\n        if (!this._stream) {\n            throw new Error(`Could not find youtube streaming library.`);\n        }\n\n        let url = info.url;\n\n        if (YoutubeExtractor.validateURL(info.raw.url)) url = info.raw.url;\n        else {\n            const _url = await makeYTSearch(`${info.title} ${info.author}`, 'video')\n                .then((r) => r[0].url)\n                .catch(Util.noop);\n            if (!_url) throw new Error(`Could not extract stream for this track`);\n            info.raw.url = url = _url;\n        }\n\n        return this._stream(url);\n    }\n}\n","export * from './AppleMusic';\nexport * from './Vimeo';\nexport * from './downloader';\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { QueryResolver } from 'discord-player';\nimport { parse, HTMLElement } from 'node-html-parser';\nimport { getFetch } from '../extractors/common/helper';\n\nfunction getHTML(link: string): Promise<HTMLElement | null> {\n    return getFetch(link, {\n        headers: {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.49'\n        }\n    })\n        .then((r) => r.text())\n        .then(\n            (txt) => parse(txt),\n            () => null\n        );\n}\n\nfunction makeImage({ height, url, width, ext = 'jpg' }: { url: string; width: number; height: number; ext?: string }) {\n    return url.replace('{w}', `${width}`).replace('{h}', `${height}`).replace('{f}', ext);\n}\n\nfunction parseDuration(d: string) {\n    const r = (name: string, unit: string) => `((?<${name}>-?\\\\d*[\\\\.,]?\\\\d+)${unit})?`;\n    const regex = new RegExp(\n        [\n            '(?<negative>-)?P',\n            r('years', 'Y'),\n            r('months', 'M'),\n            r('weeks', 'W'),\n            r('days', 'D'),\n            '(T',\n            r('hours', 'H'),\n            r('minutes', 'M'),\n            r('seconds', 'S'),\n            ')?' // end optional time\n        ].join('')\n    );\n    const test = regex.exec(d);\n    if (!test || !test.groups) return '0:00';\n\n    const dur = [test.groups.years, test.groups.months, test.groups.weeks, test.groups.days, test.groups.hours, test.groups.minutes, test.groups.seconds];\n\n    return (\n        dur\n            .filter((r, i, a) => !!r || i > a.length - 2)\n            .map((m, i) => {\n                if (!m) m = '0';\n                return i < 1 ? m : m.padStart(2, '0');\n            })\n            .join(':') || '0:00'\n    );\n}\n\nexport class AppleMusic {\n    public constructor() {\n        return AppleMusic;\n    }\n\n    public static async search(query: string) {\n        try {\n            const url = `https://music.apple.com/us/search?term=${encodeURIComponent(query)}`;\n            const node = await getHTML(url);\n            if (!node) return [];\n\n            const rawData = node.getElementById('serialized-server-data');\n            if (!rawData) return [];\n\n            const data = JSON.parse(rawData.innerText)[0].data.sections;\n            const tracks = data.find((s: any) => s.itemKind === 'trackLockup')?.items;\n            if (!tracks) return [];\n\n            return tracks.map((track: any) => ({\n                id: track.contentDescriptor.identifiers.storeAdamID,\n                duration: track.duration || '0:00',\n                title: track.title,\n                url: track.contentDescriptor.url,\n                thumbnail: track?.artwork?.dictionary\n                    ? makeImage({\n                          url: track.artwork.dictionary.url,\n                          height: track.artwork.dictionary.height,\n                          width: track.artwork.dictionary.width\n                      })\n                    : 'https://music.apple.com/assets/favicon/favicon-180.png',\n                artist: {\n                    name: track.subtitleLinks?.[0]?.title ?? 'Unknown Artist'\n                }\n            }));\n        } catch {\n            return [];\n        }\n    }\n\n    public static async getSongInfoFallback(res: HTMLElement, name: string, id: string, link: string) {\n        try {\n            const metaTags = res.getElementsByTagName('meta');\n            if (!metaTags.length) return null;\n\n            const title = metaTags.find((r) => r.getAttribute('name') === 'apple:title')?.getAttribute('content') || res.querySelector('title')?.innerText || name;\n            const contentId = metaTags.find((r) => r.getAttribute('name') === 'apple:content_id')?.getAttribute('content') || id;\n            const durationRaw = metaTags.find((r) => r.getAttribute('property') === 'music:song:duration')?.getAttribute('content');\n\n            const song = {\n                id: contentId,\n                duration: durationRaw\n                    ? parseDuration(durationRaw)\n                    : metaTags\n                          .find((m) => m.getAttribute('name') === 'apple:description')\n                          ?.textContent.split('Duration: ')?.[1]\n                          .split('\"')?.[0] || '0:00',\n                title,\n                url: link,\n                thumbnail:\n                    metaTags.find((r) => ['og:image:secure_url', 'og:image'].includes(r.getAttribute('property')!))?.getAttribute('content') ||\n                    'https://music.apple.com/assets/favicon/favicon-180.png',\n                artist: {\n                    name: res.querySelector('.song-subtitles__artists>a')?.textContent?.trim() || 'Apple Music'\n                }\n            };\n\n            return song;\n        } catch {\n            return null;\n        }\n    }\n\n    public static async getSongInfo(link: string) {\n        if (!QueryResolver.regex.appleMusicSongRegex.test(link)) {\n            return null;\n        }\n\n        const url = new URL(link);\n        const id = url.searchParams.get('i');\n        const name = url.pathname.split('album/')[1]?.split('/')[0];\n\n        if (!id || !name) return null;\n\n        const res = await getHTML(`https://music.apple.com/us/song/${name}/${id}`);\n        if (!res) return null;\n\n        try {\n            const datasrc =\n                res.getElementById('serialized-server-data')?.innerText || res.innerText.split('<script type=\"application/json\" id=\"serialized-server-data\">')?.[1]?.split('</script>')?.[0];\n            if (!datasrc) throw 'not found';\n            const data = JSON.parse(datasrc)[0].data.seoData;\n            const song = data.ogSongs[0]?.attributes;\n\n            return {\n                id: data.ogSongs[0]?.id || data.appleContentId || id,\n                duration: song?.durationInMillis || '0:00',\n                title: song?.name || data.appleTitle,\n                url: song?.url || data.url || link,\n                thumbnail: song?.artwork\n                    ? makeImage({\n                          url: song.artwork.url,\n                          height: song.artwork.height,\n                          width: song.artwork.width\n                      })\n                    : data.artworkUrl\n                    ? makeImage({\n                          height: data.height,\n                          width: data.width,\n                          url: data.artworkUrl,\n                          ext: data.fileType || 'jpg'\n                      })\n                    : 'https://music.apple.com/assets/favicon/favicon-180.png',\n                artist: {\n                    name: song?.artistName || data.socialTitle || 'Apple Music'\n                }\n            };\n        } catch {\n            return this.getSongInfoFallback(res, name, id, link);\n        }\n    }\n\n    public static async getPlaylistInfo(link: string) {\n        if (!QueryResolver.regex.appleMusicPlaylistRegex.test(link)) {\n            return null;\n        }\n\n        const res = await getHTML(link);\n        if (!res) return null;\n\n        try {\n            const datasrc =\n                res.getElementById('serialized-server-data')?.innerText || res.innerText.split('<script type=\"application/json\" id=\"serialized-server-data\">')?.[1]?.split('</script>')?.[0];\n            if (!datasrc) throw 'not found';\n            const pl = JSON.parse(datasrc)[0].data.seoData;\n            const thumbnail = pl.artworkUrl\n                ? makeImage({\n                      height: pl.height,\n                      width: pl.width,\n                      url: pl.artworkUrl,\n                      ext: pl.fileType || 'jpg'\n                  })\n                : 'https://music.apple.com/assets/favicon/favicon-180.png';\n            return {\n                id: pl.appleContentId,\n                title: pl.appleTitle,\n                thumbnail,\n                artist: {\n                    name: pl.ogSongs?.[0]?.attributes?.artistName || 'Apple Music'\n                },\n                url: pl.url,\n                tracks:\n                    // eslint-disable-next-line\n                    pl.ogSongs?.map((m: any) => {\n                        const song = m.attributes;\n                        return {\n                            id: m.id,\n                            duration: song.durationInMillis || '0:00',\n                            title: song.name,\n                            url: song.url,\n                            thumbnail: song.artwork\n                                ? makeImage({\n                                      url: song.artwork.url,\n                                      height: song.artwork.height,\n                                      width: song.artwork.width\n                                  })\n                                : thumbnail,\n                            artist: {\n                                name: song.artistName || 'Apple Music'\n                            }\n                        };\n                    }) || []\n            };\n        } catch {\n            return null;\n        }\n    }\n\n    public static async getAlbumInfo(link: string) {\n        if (!QueryResolver.regex.appleMusicAlbumRegex.test(link)) {\n            return null;\n        }\n\n        const res = await getHTML(link);\n        if (!res) return null;\n\n        try {\n            const datasrc =\n                res.getElementById('serialized-server-data')?.innerText || res.innerText.split('<script type=\"application/json\" id=\"serialized-server-data\">')?.[1]?.split('</script>')?.[0];\n            if (!datasrc) throw 'not found';\n            const pl = JSON.parse(datasrc)[0].data.seoData;\n            const thumbnail = pl.artworkUrl\n                ? makeImage({\n                      height: pl.height,\n                      width: pl.width,\n                      url: pl.artworkUrl,\n                      ext: pl.fileType || 'jpg'\n                  })\n                : 'https://music.apple.com/assets/favicon/favicon-180.png';\n            return {\n                id: pl.appleContentId,\n                title: pl.appleTitle,\n                thumbnail,\n                artist: {\n                    name: pl.ogSongs?.[0]?.attributes?.artistName || 'Apple Music'\n                },\n                url: pl.url,\n                tracks:\n                    // eslint-disable-next-line\n                    pl.ogSongs?.map((m: any) => {\n                        const song = m.attributes;\n                        return {\n                            id: m.id,\n                            duration: song.durationInMillis || '0:00',\n                            title: song.name,\n                            url: song.url,\n                            thumbnail: song.artwork\n                                ? makeImage({\n                                      url: song.artwork.url,\n                                      height: song.artwork.height,\n                                      width: song.artwork.width\n                                  })\n                                : thumbnail,\n                            artist: {\n                                name: song.artistName || 'Apple Music'\n                            }\n                        };\n                    }) || []\n            };\n        } catch {\n            return null;\n        }\n    }\n}\n","import { BaseExtractor, ExtractorInfo, ExtractorSearchContext, Playlist, QueryType, SearchQueryType, Track, Util } from 'discord-player';\nimport { Readable } from 'stream';\nimport { YoutubeExtractor } from './YoutubeExtractor';\nimport { StreamFN, getFetch, loadYtdl, makeYTSearch } from './common/helper';\nimport spotify, { Spotify, SpotifyAlbum, SpotifyPlaylist, SpotifySong } from 'spotify-url-info';\n\nexport class SpotifyExtractor extends BaseExtractor {\n    public static identifier = 'com.discord-player.spotifyextractor' as const;\n    private _stream!: StreamFN;\n    private _lib!: Spotify;\n\n    public async activate(): Promise<void> {\n        const lib = await loadYtdl(this.context.player.options.ytdlOptions);\n        this._stream = lib.stream;\n        this._lib = spotify(getFetch);\n    }\n\n    public async validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean> {\n        return (<SearchQueryType[]>[QueryType.SPOTIFY_ALBUM, QueryType.SPOTIFY_PLAYLIST, QueryType.SPOTIFY_SONG]).some((t) => t === type);\n    }\n\n    public async getRelatedTracks(track: Track) {\n        void track;\n        return this.createResponse();\n    }\n\n    public async handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo> {\n        switch (context.type) {\n            case QueryType.SPOTIFY_SONG: {\n                const spotifyData: SpotifySong | void = await this._lib.getData(query, context.requestOptions as unknown as RequestInit).catch(Util.noop);\n                if (!spotifyData) return { playlist: null, tracks: [] };\n                const spotifyTrack = new Track(this.context.player, {\n                    title: spotifyData.title,\n                    description: `${spotifyData.name} by ${spotifyData.artists.map((m) => m.name).join(', ')}`,\n                    author: spotifyData.artists[0]?.name ?? 'Unknown Artist',\n                    url: spotifyData.id ? `https://open.spotify.com/track/${spotifyData.id}` : query,\n                    thumbnail: spotifyData.coverArt?.sources?.[0]?.url || 'https://www.scdn.co/i/_global/twitter_card-default.jpg',\n                    duration: Util.buildTimeCode(Util.parseMS(spotifyData.duration ?? spotifyData.maxDuration ?? 0)),\n                    views: 0,\n                    requestedBy: context.requestedBy,\n                    source: 'spotify',\n                    queryType: context.type\n                });\n\n                return { playlist: null, tracks: [spotifyTrack] };\n            }\n            case QueryType.SPOTIFY_PLAYLIST: {\n                const spotifyPlaylist: SpotifyPlaylist | void = await this._lib.getData(query, context.requestOptions as unknown as RequestInit).catch(Util.noop);\n                if (!spotifyPlaylist) return { playlist: null, tracks: [] };\n\n                const playlist = new Playlist(this.context.player, {\n                    title: spotifyPlaylist.name ?? spotifyPlaylist.title,\n                    description: spotifyPlaylist.title ?? '',\n                    thumbnail: spotifyPlaylist.coverArt?.sources?.[0]?.url ?? 'https://www.scdn.co/i/_global/twitter_card-default.jpg',\n                    type: spotifyPlaylist.type,\n                    source: 'spotify',\n                    author: {\n                        name: spotifyPlaylist.subtitle ?? 'Unknown Artist',\n                        url: null as unknown as string\n                    },\n                    tracks: [],\n                    id: spotifyPlaylist.id,\n                    url: spotifyPlaylist.id ? `https://open.spotify.com/playlist/${spotifyPlaylist.id}` : query,\n                    rawPlaylist: spotifyPlaylist\n                });\n\n                playlist.tracks = spotifyPlaylist.trackList.map((m) => {\n                    const data = new Track(this.context.player, {\n                        title: m.title ?? '',\n                        description: m.title ?? '',\n                        author: m.subtitle ?? 'Unknown Artist',\n                        url: m.uid ? `https://open.spotify.com/tracks/${m.uid}` : query,\n                        thumbnail: 'https://www.scdn.co/i/_global/twitter_card-default.jpg',\n                        duration: Util.buildTimeCode(Util.parseMS(m.duration)),\n                        views: 0,\n                        requestedBy: context.requestedBy,\n                        playlist,\n                        source: 'spotify',\n                        queryType: 'spotifySong'\n                    });\n                    return data;\n                }) as Track[];\n\n                return { playlist, tracks: playlist.tracks };\n            }\n            case QueryType.SPOTIFY_ALBUM: {\n                const album: SpotifyAlbum | void = await this._lib.getData(query, context.requestOptions as unknown as RequestInit).catch(Util.noop);\n                if (!album) return { playlist: null, tracks: [] };\n\n                const playlist = new Playlist(this.context.player, {\n                    title: album.name ?? album.title,\n                    description: album.title ?? '',\n                    thumbnail: album.coverArt?.sources?.[0]?.url ?? 'https://www.scdn.co/i/_global/twitter_card-default.jpg',\n                    type: album.type,\n                    source: 'spotify',\n                    author: {\n                        name: album.subtitle ?? 'Unknown Artist',\n                        url: null as unknown as string\n                    },\n                    tracks: [],\n                    id: album.id,\n                    url: album.id ? `https://open.spotify.com/playlist/${album.id}` : query,\n                    rawPlaylist: album\n                });\n\n                playlist.tracks = album.trackList.map((m) => {\n                    const data = new Track(this.context.player, {\n                        title: m.title ?? '',\n                        description: m.title ?? '',\n                        author: m.subtitle ?? 'Unknown Artist',\n                        url: m.uid ? `https://open.spotify.com/tracks/${m.uid}` : query,\n                        thumbnail: 'https://www.scdn.co/i/_global/twitter_card-default.jpg',\n                        duration: Util.buildTimeCode(Util.parseMS(m.duration)),\n                        views: 0,\n                        requestedBy: context.requestedBy,\n                        playlist,\n                        source: 'spotify',\n                        queryType: 'spotifySong'\n                    });\n                    return data;\n                }) as Track[];\n\n                return { playlist, tracks: playlist.tracks };\n            }\n            default:\n                return { playlist: null, tracks: [] };\n        }\n    }\n\n    public async stream(info: Track): Promise<string | Readable> {\n        if (!this._stream) {\n            throw new Error(`Could not find youtube streaming library.`);\n        }\n\n        let url = info.url;\n\n        if (YoutubeExtractor.validateURL(info.raw.url)) url = info.raw.url;\n        else {\n            const _url = await makeYTSearch(`${info.title} ${info.author}`, 'video')\n                .then((r) => r[0].url)\n                .catch(Util.noop);\n            if (!_url) throw new Error(`Could not extract stream for this track`);\n            info.raw.url = url = _url;\n        }\n\n        return this._stream(url);\n    }\n}\n","export * from './extractors';\nexport * as Internal from './internal';\n\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\nexport const version: string = '4.1.1';\n"],"mappings":"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","names":["YouTube","BaseExtractor","Playlist","QueryType","Track","Util","lib","BaseExtractor","QueryType","YouTube","Util","Playlist","Track","BaseExtractor","QueryType","Track","Util","BaseExtractor","QueryType","Util","Track","BaseExtractor","QueryType","Track","Util","BaseExtractor","QueryType","Util","Track","BaseExtractor","QueryType","Track","Util","http","https","http","https","BaseExtractor","QueryType","Track","Util","BaseExtractor","Playlist","QueryType","Track","Util","r","BaseExtractor","QueryType","Track","Util","Playlist","BaseExtractor","Playlist","QueryType","Track","Util","BaseExtractor","QueryType","Util","Track","Playlist"]}